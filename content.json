{"pages":[],"posts":[{"title":"MongoDB命令及其MongoTemplate的混合讲解","text":"前言前面讲解了如何在springboot中集成mongodb，本文将讲解mongodb命令操作及其MongoTemplate的使用。穿插的目的在于不用先去寻找mongodb的命令又去寻找在java中的应用。本人就是从中过来的，所以本文旨在减少刚入门的同学少走一点弯路。 mongoDB所存储的数据以键值对的方式存储 注意事项在创建数据库和创建集合没有讲解MongoTemplate的使用是因为：在创建数据库时只需要在配置文件中配置database路径即可。而在创建集合是只需要进行插入或者更新操作即可自动创建集合 注入mongotemplate 12@Autowired MongoTemplate mongoTemplate; 1. 创建数据库1234use mydatabase#插入数据db.mydatabase({\"name\",\"我的数据库\"})show dbs 2. 创建集合1234use mydatabasedb.createCollection(\"mycollection\")# 显示所有集合show collections 3. 插入文档命令方式： 12345db.mycollection.insert({ \"key\":\"data\", \"value\":\"数据\"， \"num\": 1}) java代码： 123// 自定义对象Data data = new Data(\"data\",\"数据\",1);mongoTemplate.insert(data, \"mycollection\"); 3. 更新文档命令方式： 12345678910111213# 更新单行db.mycollection.update({\"key\":\"data\"},{\"$set\":{\"value\":\"更新数据\"}})# 更新多行db.mycollection.update({\"key\":\"data\"},{\"$set\":{\"value\":\"更新数据\"}},{multi:true})#如果数据结构是 { \"key\":\"key\" \"data\":{ \"value\":\"数据\" }}db.mycollection.update({\"key\":\"data\"},{\"$set\":{\"data.value\":\"更新数据\"}}) java代码： 123456789Update update = new Update();update.set(\"value\":\"更新数据\")；update.set(\"data.value\":\"更新数据\")；// num自增加 前提 num 对应的必须为整形或者浮点型update.inc(\"num\", 1);Query query = new Query( Criteria.where(\"key\").is(\"data\"));mongoTemplate.updateFirst(query, update, \"mycollecition\"); 4. 查询文档命令方式 123456#普通查询db.mycollection.find({\"key\":\"data\"})#正则查询db.mycollection.find({\"key\":{\"$regex\":\"dat\"}})#大于等于 gte 小于等于 lte 大于 gt 小于 ltdb.mycollection.find({\"num\":{\"$lt\":1}})","link":"/2019/01/22/MongoDB命令及其MongoTemplate的混合讲解/"},{"title":"设计模式之单例模式","text":"前言设计模式是人们在日常工作中总结出来的一些好的设计方式。用于指导人们能够写出优雅（可扩展，好维护）的代码。 也能让自己心情愉快。 简介单例模式是一种比较简单的模式。定义为确保某一个类只有一个是实例，而且自行实例化并向整个系统提供这个实例。 例子饿汉式：12345678910public class Singleton { private static final Singleton singeleton = new Singleton(); // 私有对象可限制new多个对象 private Singleton(){} public static Singleton getSingeleton(){ return singeleton; } } 优点： 线程安全 实现简单 缺点： 不是懒加载，在加载类时就会被初始化。即使该类你没有被使用。 如果实例依赖参数则无法实现 懒汉式 线程不安全（不推荐）1234567891011public class Singleton { private static Singleton instance; private Singleton (){} public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; }} 优点： 实现了懒加载，在单线程下在使用时才能正确创建实例 缺点： 虽然使用了懒加载，但是有个严重问题。在多个线程并行调用getInstance()时会创建多个实例。这样在这个充满多线程开发的web应用下是很不可取的。所以不推荐这种用法。 懒汉式 线程安全（双重检验锁模式）使用同步块枷锁的方式来保证线程安全，为何双重判断？当有多个线程同时进入第一个if的时候。如果此时未实例化，则会只有一个线程进入同步代码块，其他代码块将会等待，然后进入第二个。如果该线程在获取锁后已经实例化就跳过实例化，所以存在第二重判断空。 12345678910public static Singleton getSingleton() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance ;} 以上代码看着很完美，但是它存在一个问题。instance = new Singleton();就是这个 他并非一个原子操作。这句在jvm中做了三件事情 分配内存 调用构造函数初始化成员变量 分配内存空间（instance ！=null） 由于jvm在编译时存在指令重排序的优化，也就是第二步和第三步有可能被交换。这样就会出现先分配空间在初始化。这时如果有线程到了第一个if就会错误的得到instanc！=null的并没有初始化的实例。如果使用没有初始化的实例则会报错。 解决方案为添加volatile关键字来防止指令的重排 优化后的代码： 12345678910111213141516public class Singleton { private volatile static Singleton instance; //声明成 volatile private Singleton (){} public static Singleton getSingleton() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } } 优点： 实现了懒加载 线程安全 缺点： 代码较复杂而且还隐含jvm问题，不容易理解，一不小心容易犯错 java5以前的版本volatile有缺陷无法避免重排序 存在同步代码块，性能上可能不如其他方式 懒汉式，静态内部类（懒汉式加载推荐）《Effective Java》上推荐 123456789public class Singleton { private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } private Singleton (){} public static final Singleton getInstance() { return SingletonHolder.INSTANCE; } } 优点： 懒加载 线程安全 读取实例不同步，性能比双重校验好 缺点： 基本无缺点，真要说缺点就是不出名 小结就一般而言，直接使用饿汉式即可，如果要求使用懒加载推荐使用静态内部类。 为何要使用单列模式优点： 单例模式在内存中，只有一个实例，减少内存开支。 当一个对象的产生需要比较多资源时，如读取配置可以通过启动时实现一个单例对象来解决 避免对资源的多重占用，避免对一个资源文件的同时写操作 缺点： 没有接口，扩展难 对测试不理 与单一职责原则冲突 使用场景 要求生成巍译序列号的环境 整个项目需要一个共享访问点或共享数据，如web页面计数器，使用单例可以保持计数器的值 创建一个对象需要消耗资源过多，如访问IO和数据库","link":"/2019/01/22/设计模式之单例模式/"},{"title":"SpringBoot与mongodb的结合","text":"本文系列文章： ​ 使用Shell 操作 MongoDB的技巧 ​ MongoTemplate的使用技巧及其注意事项 敬请期待。 前言最近公司想要做一个用户行为数据的收集，最开始想用mysql来存储后来发现这种方式对于不固定数据格式的保存存在局限性，也不利于查询统计操作。所以衍生了使用mongodb这种非结构化的数据库来保存。 mongoDB简介MongoDB（来自于英文单词“Humongous”，中文含义为“庞大”）是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。作为一个适用于敏捷开发的数据库，MongoDB的数据模式可以随着应用程序的发展而灵活地更新。与此同时，它也为开发人员 提供了传统数据库的功能：二级索引，完整的查询系统以及严格一致性等等。 MongoDB能够使企业更加具有敏捷性和可扩展性，各种规模的企业都可以通过使用MongoDB来创建新的应用，提高与客户之间的工作效率，加快产品上市时间，以及降低企业成本。 MongoDB是专为可扩展性，高性能和高可用性而设计的数据库。它可以从单服务器部署扩展到大型、复杂的多数据中心架构。利用内存计算的优势，MongoDB能够提供高性能的数据读写操作。 MongoDB的本地复制和自动故障转移功能使您的应用程序具有企业级的可靠性和操作灵活性。 1. mongoDB 安装本文采用docker才安装mongoDB 访问：https://hub.docker.com/r/bitnami/mongodb/ 选取需要的版本号,具体操作也可查看 12docker pull bitnami/mongodbdocker run --name mongodb -d -p 27017:27017 bitnami/mongodb 2. Springboot 添加mongoDB依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;&lt;/dependency&gt; 3. 修改配置文件12345#mongoDbspring.data.mongodb.host=127.0.0.1spring.data.mongodb.port=27017#数据库名称spring.data.mongodb.database=behavior 4.简单使用12345678@Autowired MongoTemplate mongoTemplate;@Testpublic void testMongo(){ Query query = Query.query(Criteria.where(\"key\").is(\"mongo\")); // \"mongo\" 为容器名 mongodb的具体知识请访问mongodb官方 mongoTemplate.findOne(query,Map.class,\"mongo\");}","link":"/2019/01/22/SpringBoot与mongodb的结合/"},{"title":"Spring boot 整合 Swagger","text":"本文github位置：https://github.com/WillVi/springboot-swagger2-demo环境准备 JDK版本：1.8 Spring boot版本：1.5.16 Swagger及其Swagger-ui版本：2.6.1（关于swagger-ui版本 每个版本的汉化方式可能有不同） 默认url：http://localhost:8080/swagger-ui.html Maven依赖123456789101112&lt;!-- swagge2 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- swaggerui用于展示swagger页面 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt; 注意事项：swagger-ui依赖 有可能会与com.google.guava冲突 提供一个解决办法: 123456789101112&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt; &lt;!-- 将冲突包移除 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Configuration@EnableSwagger2public class Swagger2Config { @Bean public Docket api() { // 统一设置返回描述 List&lt;ResponseMessage&gt; responseMessages = new ArrayList&lt;&gt;(); responseMessages.add(new ResponseMessageBuilder().code(400).message(\"请求参数有误\").build()); responseMessages.add(new ResponseMessageBuilder().code(401).message(\"未授权\").build()); responseMessages.add(new ResponseMessageBuilder().code(403).message(\"禁止访问\").build()); responseMessages.add(new ResponseMessageBuilder().code(404).message(\"请求路径不存在\").build()); responseMessages.add(new ResponseMessageBuilder().code(500).message(\"服务器内部错误\").responseModel(new ModelRef(\"string\")).build()); return new Docket(DocumentationType.SWAGGER_2) // 禁用默认返回描述 .useDefaultResponseMessages(false) // 启用新的返回描述 .globalResponseMessage(RequestMethod.GET, responseMessages) .globalResponseMessage(RequestMethod.POST, responseMessages) .globalResponseMessage(RequestMethod.PATCH, responseMessages) .globalResponseMessage(RequestMethod.PUT, responseMessages) .globalResponseMessage(RequestMethod.DELETE, responseMessages) // 设置基本信息 .apiInfo(apiInfo()) .select() // 设置哪些api被扫描 .apis(RequestHandlerSelectors.basePackage(\"cn.willvi.springbootswaggerdemo\")) // 设置路径 .paths(PathSelectors.any()) .build(); } /** * 设置基本信息 * @return */ private ApiInfo apiInfo() { return new ApiInfoBuilder() // 标题 .title(\"我的接口文档\") // 描述 .description(\"这是我的第一个接口文档\") // 版本号 .version(\"1.0\") // 项目的链接 .termsOfServiceUrl(\"\") // 作者 .license(\"willvi\") .licenseUrl(\"\") .build(); }} Swagger注解详解@Api 设置Controller整体信息注解位置：Controller类上 12345678910111213/** * value url路径值（汉化后不起作用） http://xxx/swagger-ui.html#/demo-controller中的 demo-controller即为value * tags 设置这个值、value的值会被覆盖（汉化后有bug最好不写） * description 对api资源的描述 * basePath 基本路径可以不配置 * position 如果配置多个Api 想改变显示的顺序位置 * produces 例如, \"application/json, application/xml\" 页面上的 Response Content Type (响应Content Type) 约束响应资源的表现形式 * consumes 例如, \"application/json, application/xml\" 请求资源的表现形式 * protocols Possible values: http, https, ws, wss. * authorizations 高级特性认证时配置 * hidden 配置为true 将在文档中隐藏 */@Api(value = \"Swagger 注解使用\",description = \"123\") @ApiOperation 设置每个方法（接口）信息注解位置：方法上 1234567891011121314151617181920212223/** * value 页面tab右侧值 * tags 如果设置这个值、value的值会被覆盖 * description 对api资源的描述 * basePath 基本路径可以不配置 * position 如果配置多个Api 想改变显示的顺序位置 * produces 例如, \"application/json, application/xml\" * consumes 例如, \"application/json, application/xml\" * protocols Possible values: http, https, ws, wss. * authorizations 高级特性认证时配置 * hidden 配置为true 将在文档中隐藏 * response 返回的对象 * responseContainer 这些对象是有效的 \"List\", \"Set\" or \"Map\".，其他无效 * httpMethod \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\" and \"PATCH\" * code http的状态码 默认 200 * extensions 扩展属性 */ @ApiOperation( value = \"post\", notes = \"这是一个小demo\", produces = \"application/json\", response = Person.class ) @ApiImplicitParams 与 @ApiImplicitParam 设置传入参数信息注解位置：方法上 注意事项： name必须与参数名相同，不然多出一个参数框 1234567891011121314/** * @ApiImplicitParam * 当dataType不是对象时可以使用 * * paramType：参数放在哪个地方 path,query,heard,body,from * name：参数代表的含义 * value：参数名称 * dataType： 参数类型，有String/int，无用 * required ： 是否必要 * defaultValue：参数的默认值 */@ApiImplicitParams( @ApiImplicitParam(name = \"name\",value = \"name\",paramType =\"path\", dataType = \"String\")) @ApiResponses 设置返回的一些状态码信息注解位置：方法上 123456789 /** * code http的状态码 * message 描述 * response 默认响应类 Void * reference 参考ApiOperation中配置 * responseHeaders 参考 ResponseHeader 属性配置说明 * responseContainer 参考ApiOperation中配置 */@ApiResponses({@ApiResponse(code = 500, message = \"服务器内部错误\", response = String.class)}) @ApiModel描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候 注解位置：实体类上 @ApiModelProperty描述一个model的属性。 注解位置：实体类每个属性上面 1@ApiModelProperty(value = \"姓名\",name = \"name\") @ApiParam注解位置：方法参数内 12345678910111213141516/** * name 属性名称 * value 属性值 * defaultValue 默认属性值 * allowableValues 可以不配置 * required 是否属性必填 * access 不过多描述 * allowMultiple 默认为false * hidden 隐藏该属性 * example 举例子 */public ResponseEntity&lt;String&gt; placeOrder( @ApiParam(value = \"xxxx\", required = true) Person person) { storeData.add(order); return ok(\"\"); } Controler示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566@Api(value = \"Swagger 注解使用\")@RestController@RequestMapping(\"/\")public class DemoController { @PostMapping(\"/postHello\") /** * value url的路径值 * tags 如果设置这个值、value的值会被覆盖 * description 对api资源的描述 * basePath 基本路径可以不配置 * position 如果配置多个Api 想改变显示的顺序位置 * produces 例如, \"application/json, application/xml\" * consumes 例如, \"application/json, application/xml\" * protocols Possible values: http, https, ws, wss. * authorizations 高级特性认证时配置 * hidden 配置为true 将在文档中隐藏 * response 返回的对象 * responseContainer 这些对象是有效的 \"List\", \"Set\" or \"Map\".，其他无效 * httpMethod \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\" and \"PATCH\" * code http的状态码 默认 200 * extensions 扩展属性 */ @ApiOperation( value = \"post\", notes = \"这是一个小demo\", produces = \"application/json\", response = Person.class ) /** * code http的状态码 * message 描述 * response 默认响应类 Void * reference 参考ApiOperation中配置 * responseHeaders 参考 ResponseHeader 属性配置说明 * responseContainer 参考ApiOperation中配置 */ @ApiResponses({@ApiResponse(code = 500, message = \"服务器内部错误\", response = String.class)}) public ResponseEntity&lt;Person&gt; postHello(@RequestBody Person person){ return ResponseEntity.ok(person); } @GetMapping(\"/hello/{name}\") @ApiOperation( value = \"hello world\", notes = \"这是一个小demo\" ) /** * @ApiImplicitParam * 当dataType不是对象时可以使用 * paramType：参数放在哪个地方 * name：参数代表的含义 * value：参数名称 * dataType： 参数类型，有String/int，无用 * required ： 是否必要 * defaultValue：参数的默认值 */ @ApiImplicitParams( @ApiImplicitParam(value = \"name\",paramType =\"path\", dataType = \"String\",defaultValue = \"world\") ) public String hello(@PathVariable String name){ return \"hello \" + name; }} Model示例1234567891011// 描述一个Model的信息@ApiModel@Getter@Setter@NoArgsConstructor@AllArgsConstructorpublic class Person { @ApiModelProperty(value = \"姓名\",name = \"name\") String name; int age;} swagger汉化 在resources资源下创建 META-INF/resources 文件夹并创建名为swagger-ui.html文件 复制以下内容： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Swagger UI&lt;/title&gt; &lt;link rel=\"icon\" type=\"image/png\" href=\"webjars/springfox-swagger-ui/images/favicon-32x32.png\" sizes=\"32x32\"/&gt; &lt;link rel=\"icon\" type=\"image/png\" href=\"webjars/springfox-swagger-ui/images/favicon-16x16.png\" sizes=\"16x16\"/&gt; &lt;link href='webjars/springfox-swagger-ui/css/typography.css' media='screen' rel='stylesheet' type='text/css'/&gt; &lt;link href='webjars/springfox-swagger-ui/css/reset.css' media='screen' rel='stylesheet' type='text/css'/&gt; &lt;link href='webjars/springfox-swagger-ui/css/screen.css' media='screen' rel='stylesheet' type='text/css'/&gt; &lt;link href='webjars/springfox-swagger-ui/css/reset.css' media='print' rel='stylesheet' type='text/css'/&gt; &lt;link href='webjars/springfox-swagger-ui/css/print.css' media='print' rel='stylesheet' type='text/css'/&gt; &lt;script src='webjars/springfox-swagger-ui/lib/object-assign-pollyfill.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/jquery-1.8.0.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/jquery.slideto.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/jquery.wiggle.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/jquery.ba-bbq.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/handlebars-4.0.5.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/lodash.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/backbone-min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/swagger-ui.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/highlight.9.1.0.pack.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/highlight.9.1.0.pack_extended.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/jsoneditor.min.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/marked.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lib/swagger-oauth.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/springfox.js' type='text/javascript'&gt;&lt;/script&gt; &lt;!-- 汉化 --&gt; &lt;script src='webjars/springfox-swagger-ui/lang/translator.js' type='text/javascript'&gt;&lt;/script&gt; &lt;script src='webjars/springfox-swagger-ui/lang/zh-cn.js' type='text/javascript'&gt;&lt;/script&gt;&lt;/head&gt;&lt;body class=\"swagger-section\"&gt;&lt;div id='header'&gt; &lt;div class=\"swagger-ui-wrap\"&gt; &lt;a id=\"logo\" href=\"http://swagger.io\"&gt;&lt;img class=\"logo__img\" alt=\"swagger\" height=\"30\" width=\"30\" src=\"webjars/springfox-swagger-ui/images/logo_small.png\" /&gt;&lt;span class=\"logo__title\"&gt;swagger&lt;/span&gt;&lt;/a&gt; &lt;form id='api_selector'&gt; &lt;div class='input'&gt; &lt;select id=\"select_baseUrl\" name=\"select_baseUrl\"/&gt; &lt;/div&gt; &lt;div class='input'&gt;&lt;input placeholder=\"http://example.com/api\" id=\"input_baseUrl\" name=\"baseUrl\" type=\"text\"/&gt;&lt;/div&gt; &lt;div id='auth_container'&gt;&lt;/div&gt; &lt;div class='input'&gt;&lt;a id=\"explore\" class=\"header__btn\" href=\"#\" data-sw-translate&gt;Explore&lt;/a&gt;&lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=\"message-bar\" class=\"swagger-ui-wrap\" data-sw-translate&gt;&amp;nbsp;&lt;/div&gt;&lt;div id=\"swagger-ui-container\" class=\"swagger-ui-wrap\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 访问即可","link":"/2019/01/22/Spring boot 整合 Swagger/"},{"title":"阿里巴巴规约中自己没有做到的点","text":"抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。 POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误 为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意 接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。 获取多个对象的方法用 list 做前缀，复数形式结尾如：listObjects。 领域模型命名规约1） 数据对象：xxxDO，xxx 即为数据表名。2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。3） 展示对象：xxxVO，xxx 一般为网页名称。4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。 不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解和维护。正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。 12345678910111213141516171819public static void main(String[] args) {// 缩进 4 个空格String say = \"hello\";// 运算符的左右必须有一个空格int flag = 0;// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格if (flag == 0) {System.out.println(say);}// 左大括号前加空格且不换行；左大括号后换行if (flag == 1) {System.out.println(\"world\");// 右大括号前换行，右大括号后有 else，不用换行} else {System.out.println(\"ok\");// 在右大括号后直接结束，则必须换行}} 注释的双斜线与注释内容之间有且仅有一个空格。 12// 这是示例注释，请注意在双斜线之后有一个空格String ygb = new String(); Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。正例：&quot;test&quot;.equals(object);反例：object.equals(&quot;test&quot;);说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类） 所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。 POJO 类必须写 toString 方法。使用 IDE 中的工具：source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。 类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法。 setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。 使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。正例： 12345List list = new ArrayList(2);list.add(\"guan\");list.add(\"bao\");String[] array = new String[list.size()];array = list.toArray(array); 反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误 使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。 12String[] str = new String[] { \"you\", \"wu\" };List list = Arrays.asList(str); 第一种情况：list.add(&quot;yangguanbao&quot;); 运行时异常。第二种情况：str[0] = &quot;gujin&quot;; 那么 list.get(0)也会随之修改。 不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。正例： 12345678910List list = new ArrayList&lt;&gt;();list.add(\"1\");list.add(\"2\");Iterator iterator = list.iterator();while (iterator.hasNext()) { String item = iterator.next(); if (删除元素的条件) { iterator.remove(); }} 反例： 12345for (String item : list) { if (\"1\".equals(item)) { list.remove(item); }} 说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？ConcurrentModificationException并发修改异常 在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。说明：三个条件如下1） x，y 的比较结果和 y，x 的比较结果相反。2） x&gt;y，y&gt;z，则 x&gt;z。3） x=y，则 x，z 比较结果和 y，z 比较结果相同。反例：下例中没有处理相等的情况，实际使用中可能会出现异常： 123456new Comparator() { @Override public int compare(Student o1, Student o2) { return o1.getId() &gt; o2.getId() ? 1 : -1; }}; 集合泛型定义时，在 JDK7 及以上，使用 diamond 语法或全省略。说明：菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。正例： 1234// &lt;&gt; diamond 方式HashMap userCache = new HashMap&lt;&gt;(16);// 全省略方式ArrayList users = new ArrayList(10); 集合初始化时，指定集合初始值大小。说明：HashMap 使用 HashMap(int initialCapacity) 初始化。正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loaderfactor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。 使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。 合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是order/sort。 利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。说明：资源驱动类、工具类、单例工厂类都需要注意。 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。说明：Executors 返回的线程池对象的弊端如下：1）FixedThreadPool 和 SingleThreadPool:允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。2）CachedThreadPool 和 ScheduledThreadPool:允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。正例：注意线程安全，使用 DateUtils。亦推荐如下处理：private static final ThreadLocal df = new ThreadLocal() {@Overrideprotected DateFormat initialValue() {return new SimpleDateFormat(“yyyy-MM-dd”);}};说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strongimmutable thread-safe。 高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。 多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。 使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。 在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。反例： 1234567891011class LazyInitDemo {private Helper helper = null;public Helper getHelper() { if (helper == null) synchronized(this) { if (helper == null) helper = new Helper(); } return helper; }// other methods and fields...} volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1);如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。 ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。 在高并发场景中，避免使用”等于”判断作为中断或退出的条件。说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，活动无法终止。 表达异常的分支时，少用 if-else 方式，这种方式可以改写成： 1234if (condition) { ... return obj;} // 接着写 else 的业务逻辑代码;说明：如果非得使用 if()…else if()…else…方式表达逻辑，【强制】避免后续代码维护困难，请勿超过 3 层。正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下： 123456789101112public void today() { if (isBusy()) { System.out.println(“change time.”); return; } if (isFree()) { System.out.println(“go to travel.”); return; } System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”); return;} 除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？正例：// 伪代码如下 12345678final boolean existed = (file.open(fileName, \"w\") != null) &amp;&amp; (...) || (...); if (existed) { ... }反例：if ((file.open(fileName, \"w\") != null) &amp;&amp; (...) || (...)) { ...} 及时清理不再使用的代码段或配置信息。说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(///)来说明注释掉代码的理由。 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明：如果 JDK7 及以上，可以使用 try-with-resources 方式。 表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。正例：aliyun_admin，rdc_config，level3_name反例：AliyunAdmin，rdcConfig，level_3_name 主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。 表必备三字段：id, gmt_create, gmt_modified。说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。 单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。 如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。正例：where a=? and b=? order by c; 索引：a_b_c反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引a_b 无法排序。 建组合索引的时候，区分度最高的在最左边。正例：如果 where a=? and b=? ，如果 a 列的几乎接近于唯一值，那么只需要单建 idx_a索引即可。说明：存在非等号和等号混合时，在建索引时，请把等号条件的列前置。如：where c&gt;? andd=? 那么即使 c 的区分度更高，也必须把 d 放在索引的最前列，即索引 idx_d_c。 不要使用 count(列名)或 count(常量)来替代 count()，count()是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。 in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控制在 1000 个之内。 POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行字段与属性之间的映射。说明：参见定义 POJO 类以及数据库字段定义规定，在中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行对应的修改。 不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个 POJO 类与之对应。说明：配置映射关系，使字段与 DO 类解耦，方便维护。 iBATIS 自带的 queryForList(String statementName,int start,int size)不推荐使用。说明：其实现方式是在数据库取到statementName对应的SQL语句的所有记录，再通过subList取 start,size 的子集合。 不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。说明：resultClass=”Hashtable”，会置入字段名和属性值，但是值的类型不可控。 更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间 类在设计与实现时要符合单一原则。说明：单一原则最易理解却是最难实现的一条规则，随着系统演进，很多时候，忘记了类设计的初衷。 谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现。说明：不得已使用继承的话，必须符合里氏代换原则，此原则说父类能够出现的地方子类一定能够出现，比如，“把钱交出来”，钱的子类美元、欧元、人民币等都可以出现。 系统设计时，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护。说明：低层次模块依赖于高层次模块的抽象，方便系统间的解耦。","link":"/2019/01/22/阿里巴巴规约中自己没有做到的点/"}],"tags":[],"categories":[]}